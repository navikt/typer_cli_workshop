# F칮rste steg

For 친 bli litt kjent med `typer` starter vi enkelt f칮r vi starter 친 l칮se
oppgaven vi har satt oss fore.

## Lage et kommandolinje-verkt칮y

La oss f칮rst starte med 친 gj칮re om `hello.py` i prosjektet v친rt til et
kommandolinje-verkt칮y. Forel칮pig s친 vil det ikke gj칮re s친 mye, men dette vil
gj칮re oss mer kjent med `typer` og vise frem litt av fordelen med `typer`.

Det f칮rste vi skal gj칮re er 친 fjerne koden som allerede ligger i `hello.py` og
erstatte den med v친r egen.

Erstatt innholdet i `hello.py` med f칮lgende:

```python
import typer

app = typer.Typer()


@app.command()
def main() -> None:
    print("Hello world!")


if __name__ == "__main__":
    app()
```

::: {.column-margin}
Legg merke til at alle kodeboksene har et lite ikon for utklippstavle 칮verst i
h칮yre hj칮rne, n친r du tar musepekeren over boksen.
<br/><br/>
Skulle du trenger 친 kopier alt som st친r i en boks 游땔.
:::

La oss kj칮re filen og se hva dette har gjort.

```bash
uv run hello.py
```

Mest sannsynlig fikk du ikke s친 mye annet enn `Hello world!` skrevet ut, men la
oss se om `typer` kanskje har gjort noe?

Pr칮v 친 kj칮r samme kommando som over, men legg til `--help`.

```bash
uv run hello.py --help
```

Forh친pentligvis s친 fikk du n친 en hjelpende beskjed i flotte farger! Her har
`typer` gjort alt for oss og gitt oss v친rt f칮rste parameter til
kommandolinje-verkt칮yet v친rt, nemlig `--help`. Som vi vil se senere s친 vil
`typer` ta hensyn til parametere vi 칮nsker samt dokumentasjon vi legger inn i
verkt칮yet.

## V친rt f칮rste argument

Akkurat n친 gj칮r jo ikke koden v친r s친 mye ut av seg, s친 la oss legge til litt
funksjonalitet. Istedenfor 친 bare skrive `Hello world!` s친 hadde det v칝rt fint
om vi kunne gi inn et navn 친 hilse p친. Da passer det godt med et argument!

I `typer` vil alle parametere til funksjonen v친r gj칮res om til kommandolinje
argumenter s친 lenge vi er flinke til 친 beskrive hvilken type variabel vi 칮nsker.

::: {.column-margin}
Hadde v칝rt kjekt med [en presentasjon om typesystemet til
Python](https://data.ansatt.nav.no/story/b98304e4-2cd0-438b-b807-5518829b70e8/index.html#/title-slide)
si 游땙
:::

La oss endre `main` til 친 ta inn et streng argument som vi kan si hei til. Endre
`main` slik at den tar in et parameter av typen `str`:

```python
@app.command()
def main(name: str) -> None:
    print(f"Hei {name}!")
```

Kj칮r koden med:

```bash
uv run hello.py
```

Ups! Det gikk ikke helt etter planen, eller gjorde det det? Vi fikk n친 beskjed
av `typer` at vi mangler et argument og det stemmer fors친vidt. Kanskje vi burde
se hva programmet v친rt n친 forventer med `--help`.

Sjekk med:

```bash
uv run hello.py --hjelp
```

Vi kan se at kommandolinje-verkt칮yet v친rt n친 har et argument og det kreves. Det
var jo egentlig det vi ville, s친 da fungerte det jo str친lende! 游봅

La oss se hvordan programmet oppf칮rer seg hvis vi gir inn et argument.

```bash
uv run hello.py NAV
```

Forh친pentligvis s친 har du n친 f친tt en hyggelig beskjed med `Hei NAV`.

## Kommandolinje argumenter mot valg

Ofte n친r vi bruker kommandolinje-verkt칮y finnes det flere forskjellige m친ter 친
oppgi parametere p친. Over s친 vi det vi kaller et kommandolinje argument, men en
annen vanlig m친te er med lenger valg `--size` (eller `--help` som vi ogs친 har
v칝rt innom). Den siste typen av parameter kommer vi til 친 kalle valg (eller
`Option` som `typer` bruker). Forskjellen mellom disse typene parametere er ikke
s친 stor og distinksjonen kan fort bli borte avhengig av preferanser, men vi holder
med `typer` og sier at argumenter er kommandolinje-parametere som _m친_ v칝re
tilstede, mens valg er kommandolinje-parametere som ikke n칮dvendigvis trengs 친
oppgis.

## V친rt f칮rste valg

La oss se hvordan dette kan fungere i praksis ved 친 legge til et
h칮flighetsparameter i verkt칮yet v친rt.

La oss endre `main` igjen til 친 inneholde et boolsk parameter som vi kan bruke
for 친 v칝re h칮flige. Vi krever ikke at bruker skal oppgi dette parametere, bruker
kan selv bestemme om det skal v칝re en h칮flig beskjed eller ikke, s친 da passer
det godt med et kommandolinje-valg.

Vi endrer main til 친 se slik ut:

```python
@app.command()
def main(name: str, formal: bool = False) -> None:
    if formal:
        print(f"Hallo {name}")
    else:
        print(f"Hei {name}!")
```

Hvis vi n친 kj칮rer verkt칮yet v친rt som f칮r:

```bash
uv run hello.py NAV
```

Ser det ikke s친 anderledes ut, men hvis vi sjekker med `--help` s친 kan vi se at
det n친 finnes et (egentlig to!) nytt kommandolinje-parametere, nemlig `--formal`.

La oss pr칮ve:

```bash
uv run hello.py NAV --formal
```

Det var litt mer noe vi kunne presentert for Hans Christian 游땗

## Dokumentere verkt칮yet v친rt

Vi har allerede sett at `typer` gir oss en del hjelp i form av automatisk
h친ndtering av parametere og hjelpebeskjeder. Men vi kan ogs친 gi `typer` en
hjelpende h친nd for 친 hjelpe brukere av verkt칮yet v친rt.

La oss dokumentere verkt칮yet v친rt. For 친 gj칮re dette bruker vi vanlige Python
[`docstring`](https://peps.python.org/pep-0257/) og dokumenterer som vi alltid
gj칮r 游븷

Endre `main` til 친 inneholde en forklarende setning om hva verkt칮yet gj칮r.

```python
@app.command()
def main(name: str, formal: bool = False) -> None:
    """Si hei til det gitte navnet"""
    if formal:
        print(f"Hallo {name}")
    else:
        print(f"Hei {name}!")
```

Hvis vi n친 kj칮rer verkt칮yet v친rt med `--help` vil vi se at `typer` har brukt
dokumentasjonen v친r for 친 veilede bruker.

I `typer` kan vi ogs친 [dokumentere individuelle
argumenter](https://typer.tiangolo.com/tutorial/arguments/help/#add-a-help-text-for-a-cli-argument)
og valg, og mer til (men det er utenfor hva vi rekker 친 dekke her)!
