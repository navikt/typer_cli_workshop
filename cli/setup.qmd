# Forberedelser

F칮r vi kan komme i gang 친 utvikle er det et par steg vi m친 gjennom for 친 passe
p친 at vi har tilgang til alt vi trenger.

Vi kommer til 친 bruke [`uv`](https://docs.astral.sh/uv/) for 친 h친ndtere
prosjektet, men vi skal passe p친 친 alltid p친peke hvilke kommandoer vi kj칮rer
slik at du ikke trenger inng친ende kjennskap til `uv`.

## Opprett prosjekt

Det f칮rste vi skal gj칮re er 친 lage et prosjekt med `uv`. Fordelen med dette er
at `uv` kan installere avhengigheter for oss samtidig som den passer p친 at vi
har et virtueltmilj칮 vi kan benytte oss av.

::: {.column-margin}
Merk at `uv` h친ndterer alt rundt virtueltmilj칮 for oss automagisk 游븿
:::

```bash
uv init --python=3.12 --app cli_workshop
```

Kommandoen vil opprette en mappe, som heter `cli_workshop` (her kan man velge
noe annet, men navn er vanskelig...), vi ber `uv` opprette denne mappen med et
"applikasjons"-oppsett (`--app`) og vi har bedt om en spesifikk versjon av
Python. Vi ber spesifikt om Python versjon `3.12` for 친 forsikre oss om at du
kj칮rer samme versjon av Python som vi antar for denne workshopen.

::: {.callout-note collapse="true"}
## Hva betyr "applikasjons"-oppsett?
`uv` kan opprette tre forskjellige typer prosjekter for oss:

- Det ene oppsettet (biblioteksoppsett - `--lib`) er myntet for prosjekter som
칮nsker 친 kunne distribuere en pakke p친 [PyPI](https://pypi.org/). Dette er
gjerne prosjekter som det gir mening at andre kan importere i sin kode.
- Det andre oppsettet (applikasjonsoppsettet - `--app`) er ment for
enkeltst친ende applikasjoner som det ikke gir s친 mye mening 친 dele som en Python
pakke, men kanskje skal fungere som et selvstendig verkt칮y (dette oppsettet er
ogs친 default med `uv init`).
- Det tredje oppsette er [(pakke - `--package`) laget for
kommandolinje-verkt칮y](https://docs.astral.sh/uv/concepts/projects/#packaged-applications).
(Dette alternativet kom etter at denne workshopen ble ferdigstilt...游봌)
:::

## Installere avhengigheter

Siden vi har et par avhengigheter som vi vet allerede n친 at vi trenger s친 laster
vi like s친 godt inn disse. N친r vi utvikler ellers ville man kanskje lagt til
avhengigheter n친r behovet melder seg, men for 친 ikke ha for mye fokus p친 `uv` s친
gj칮r vi oss ferdig med dette n친 slik at vi slipper 친 tenke s친 mye p친 det i
resten av workshopen.

::: {.column-margin}
Hvis du er her fra fremtiden og 칮nsker 친 aktivere prosjektet ditt p친 nytt
trenger du bare 친 kj칮re `uv sync` for at `uv` skal sette opp alt slik det var
sist du utviklet.
:::

For selve kommandolinje-verkt칮y funksjonaliteten trenger vi
[`typer`](https://typer.tiangolo.com), mens for muligheten til 친 laste ned
nettsider kommer vi til 친 benytte [`httpx`](https://www.python-httpx.org/). Vi
kommer ogs친 til 친 benytte [`rich`](https://rich.readthedocs.io/en/stable/), men
siden `typer` har dette som anbefalt, og installerer dette for oss, s친 kommer vi
ikke til 친 be eksplisitt om `rich`.

For 친 installere disse med `uv` m친 vi f칮rst navigere til mappen vi opprettet
over.

::: {.panel-tabset}
## Linux/MacOS/Powershell
```bash
cd cli_workshop
```
## Windows
```bash
dir cli_workshop
```
:::

Og deretter be `uv` installere 칮nskede avhengigheter:

```bash
uv add typer httpx
```